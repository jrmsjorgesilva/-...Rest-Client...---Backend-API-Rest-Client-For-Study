mercadopago [Function (anonymous)] {
    configure: [Function: configure],
    utils: {
      ONLY_DATE_PATTERN: /[0-9]{4}-[0-9]{2}-[0-9]{2}$/,
      DATE_TIME_PATTERN: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$/,
      ISO_8601_PATTERN: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}[-|+][0-9]{2}:[0-9]{2}$/,
      date: { now: [Function (anonymous)], from: [Function (anonymous)] }
    },
    configurations: {
      sandbox: false,
      show_promise_error: true,
      cache_max_size: 104857600,
      configure: [Function (anonymous)],
      getClientId: [Function (anonymous)],
      getClientSecret: [Function (anonymous)],
      getPlatformId: [Function (anonymous)],
      getCorporationId: [Function (anonymous)],
      getIntegratorId: [Function (anonymous)],
      setAccessToken: [Function (anonymous)],
      getAccessToken: [Function (anonymous)],
      setRefreshToken: [Function (anonymous)],
      getRefreshToken: [Function (anonymous)],
      getBaseUrl: [Function (anonymous)],
      getProductId: [Function (anonymous)],
      getTrackingId: [Function (anonymous)],
      getUserAgent: [Function (anonymous)],
      areTestsRunnning: [Function (anonymous)]
    },
    payment: {
      schema: { additionalProperties: true, properties: [Object] },
      idempotency: true,
      partnersHeaders: true,
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      update: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)],
      search: [Function (anonymous)],
      oldSearch: [Function (anonymous)],
      cancel: [Function (anonymous)],
      capture: [Function (anonymous)],
      capturePartial: [Function (anonymous)],
      refund: [Function (anonymous)],
      refundPartial: [Function (anonymous)]
    },
    payment_methods: { listAll: [Function (anonymous)] },
    preferences: {
      schema: { additionalProperties: true, properties: [Object] },
      partnersHeaders: true,
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      update: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)]
    },
    preapproval: {
      schema: { additionalProperties: true, properties: [Object] },
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      update: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)],
      search: [Function (anonymous)],
      cancel: [Function (anonymous)],
      pause: [Function (anonymous)]
    },
    merchant_orders: {
      schema: { additionalProperties: true, properties: [Object] },
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      update: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)]
    },
    customers: {
      schema: { additionalProperties: true, properties: [Object] },
      cards: {
        all: [Function (anonymous)],
        create: [Function (anonymous)],
        save: [Function (anonymous)],
        update: [Function (anonymous)],
        get: [Function (anonymous)],
        findById: [Function (anonymous)],
        delete: [Function (anonymous)]
      },
      search: [Function (anonymous)],
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      update: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)],
      remove: [Function (anonymous)]
    },
    ipn: {
      available_topics: [
        'preapproval',
        'authorized_payment',
        'payment',
        'merchant_order'
      ],
      getPayment: [Function (anonymous)],
      getAuthorizedPayment: [Function (anonymous)],
      manage: [Function (anonymous)],
      payment: [Function (anonymous)],
      authorized_payment: [Function (anonymous)],
      preapproval: [Function (anonymous)],
      merchant_order: [Function (anonymous)]
    },
    connect: {
      get: [Function (anonymous)],
      getCredentials: [Function (anonymous)],
      sendAuthorizationCode: [Function (anonymous)],
      getCredentialsAndConfigure: [Function (anonymous)]
    },
    money_requests: {
      schema: { additionalProperties: true, properties: [Object] },
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)]
    },
    card: {
      schema: { additionalProperties: true, properties: [Object] },
      all: [Function (anonymous)],
      get: [Function (anonymous)],
      findById: [Function (anonymous)],
      create: [Function (anonymous)],
      save: [Function (anonymous)],
      update: [Function (anonymous)],
      delete: [Function (anonymous)]
    },
    card_token: {
      schema: { additionalProperties: true, properties: [Object] },
      get: [Function (anonymous)],
      findById: [Function (anonymous)],
      create: [Function (anonymous)],
      save: [Function (anonymous)]
    },
    refund: {
      schema: { additionalProperties: true, properties: [Object] },
      idempotency: true,
      all: [Function (anonymous)],
      create: [Function (anonymous)],
      save: [Function (anonymous)]
    },
    discount_campaign: {
      schema: { additionalProperties: true, properties: [Object] },
      get: [Function (anonymous)]
    },
    sandboxMode: [Function: sandboxMode],
    getAccessToken: [Function: getAccessToken],
    get: [Function: getRest],
    post: [Function: postRest],
    put: [Function: putRest],
    delete: [Function: deleteRest],
    createPreference: [Function: createPreference],
    updatePreference: [Function: updatePreference],
    getPreference: [Function: getPreference],
    createPreapprovalPayment: [Function: createPreapprovalPayment],
    updatePreapprovalPayment: [Function: updatePreapprovalPayment],
    getPreapprovalPayment: [Function: getPreapprovalPayment],
    searchPayment: [Function: searchPayment],
    getPayment: [Function: getPayment],
    getPaymentInfo: [Function: getPayment],
    getAuthorizedPayment: [Function: getAuthorizedPayment],
    refundPayment: [Function: refundPayment],
    cancelPayment: [Function: cancelPayment],
    cancelPreapprovalPayment: [Function: cancelPreapprovalPayment],
    version: '1.5.14'
  }
  server is running on the port 8000
  conectado com sucesso
  [AxiosError: Request failed with status code 401] {
    code: 'ERR_BAD_REQUEST',
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [Function: httpAdapter],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: { FormData: [Function] },
      validateStatus: [Function: validateStatus],
      headers: {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        Authorization: 'Bearer process.env.MERCADOPAGO_ACCESS_TOKEN',
        'User-Agent': 'axios/0.27.2'
      },
      body: {
        email: 'jhonathas@url.com',
        first_name: 'Jhonathas',
        last_name: 'url',
        phone: [Object],
        identification: [Object],
        default_address: 'Rua juruster',
        address: [Object],
        date_registered: '2021-10-20T11:37:30.000-04:00',
        description: 'Usuario cadastrado no programa de proteção ao cliente marabras',
        default_card: 'visa'
      },
      method: 'post',
      url: 'https://api.mercadopago.com/v1/customers',
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        prefinish: [Function: requestOnPrefinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'api.mercadopago.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype],
        _eventsCount: 10,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'api.mercadopago.com',
        _readableState: [ReadableState],
        _maxListeners: undefined,
        _writableState: [WritableState],
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: [TLSWrap],
        _requestCert: true,
        _rejectUnauthorized: true,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(res)]: [TLSWrap],
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: 1477,
        [Symbol(kHandle)]: [TLSWrap],
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: [Object],
        [Symbol(RequestTimeout)]: undefined
      },
      _header: 'POST /v1/customers HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'Authorization: Bearer process.env.MERCADOPAGO_ACCESS_TOKEN\r\n' +
        'User-Agent: axios/0.27.2\r\n' +
        'Host: api.mercadopago.com\r\n' +
        'Connection: close\r\n' +
        'Content-Length: 0\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype],
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 3,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'POST',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: '/v1/customers',
      _ended: true,
      res: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [TLSSocket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [Array],
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: [TLSSocket],
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        responseUrl: 'https://api.mercadopago.com/v1/customers',
        redirects: [],
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: [Object],
        [Symbol(kHeadersCount)]: 26,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'api.mercadopago.com',
      protocol: 'https:',
      _redirectable: Writable {
        _writableState: [WritableState],
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        _options: [Object],
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'https://api.mercadopago.com/v1/customers',
        [Symbol(kCapture)]: false
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'content-type': [Array],
        authorization: [Array],
        'user-agent': [Array],
        host: [Array]
      }
    },
    response: {
      status: 401,
      statusText: 'Unauthorized',
      headers: {
        date: 'Thu, 14 Jul 2022 13:46:39 GMT',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '133',
        connection: 'close',
        'x-content-type-options': 'nosniff',
        'x-request-id': '2143c6d7-998e-454d-943b-0e0a6d1c46c4',
        'x-xss-protection': '1; mode=block',
        'strict-transport-security': 'max-age=16070400; includeSubDomains; preload',
        'access-control-allow-origin': '*',
        'access-control-allow-headers': 'Content-Type',
        'access-control-allow-methods': 'PUT, GET, POST, DELETE, OPTIONS',
        'access-control-max-age': '86400',
        'timing-allow-origin': '*'
      },
      config: {
        transitional: [Object],
        adapter: [Function: httpAdapter],
        transformRequest: [Array],
        transformResponse: [Array],
        timeout: 0,
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN',
        maxContentLength: -1,
        maxBodyLength: -1,
        env: [Object],
        validateStatus: [Function: validateStatus],
        headers: [Object],
        body: [Object],
        method: 'post',
        url: 'https://api.mercadopago.com/v1/customers',
        data: undefined
      },
      request: <ref *1> ClientRequest {
        _events: [Object: null prototype],
        _eventsCount: 7,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        _closed: false,
        socket: [TLSSocket],
        _header: 'POST /v1/customers HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'Authorization: Bearer process.env.MERCADOPAGO_ACCESS_TOKEN\r\n' +
          'User-Agent: axios/0.27.2\r\n' +
          'Host: api.mercadopago.com\r\n' +
          'Connection: close\r\n' +
          'Content-Length: 0\r\n' +
          '\r\n',
        _keepAliveTimeout: 0,
        _onPendingData: [Function: nop],
        agent: [Agent],
        socketPath: undefined,
        method: 'POST',
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        path: '/v1/customers',
        _ended: true,
        res: [IncomingMessage],
        aborted: false,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        reusedSocket: false,
        host: 'api.mercadopago.com',
        protocol: 'https:',
        _redirectable: [Writable],
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype]
      },
      data: {
        message: 'access denied',
        error: 'unauthorized',
        status: 401,
        cause: [Array]
      }
    }
  }
